Indiquer vos réponses aux questions de l'exercice 1 du Bilan 2 ci-après : 

[B1.1] Quelle est la portée de chaque variable déclarée ? Pour chaque variable, on donnera le numéro de ligne où commence et se termine sa portée.

int n = 10;
    de ligne 8 jusqu'à ligne 20, de ligne 26 jusqu'à ligne 36

int *p = NULL;
    de ligne 9 jusqu'à ligne 36

int a = 5;
    de ligne 13 jusqu'à ligne 17;

int n = 7;
    de ligne 22 à ligne 24;

double r = 11;
    de ligne 30 à ligne 32;


[B1.2] Y a-t-il un exemple de masquage de variable dans ce programme ?

Oui, la déclaration ligne 22 masque celle de ligne 8.


[B1.3] Peut-on savoir ce que devrait afficher l’exécution de ce programme ?

Non, car on affiche des addresses (lignes 10, 11 etc...) et cela est lié à l'état de la mémoire.


[B1.4] Même s’il compile sans erreur, ce programme est faux. Pourquoi ?

Sous Windows: Le programme n'est pas faux, même si on sort d'un bloque et que le compilateur ne reconnait plus la variable,
    mais elle n'est pas detruite (voir stdout du programme sous windows dessous)

Sous Linux: Quand on sort d'un bloque, les variables déclarées dans ce bloque sont détruites et donc quand on essaie de
    déclarer d'autres variables le long du programme, elles prennent le même emplacement de mémoire que celles précédentes.
    p ne change pas, mais c'est la valeur où p pointe que change.


[B1.5] La valeur de `p` change-t-elle après l’initialisation de la ligne 14 ?

Windows: Non, on ne fait que afficher p et la valeur où il pointe.
Linux: Oui, car on initialise de nouvelles variables dans l'espace ou pointe p.



[B1.6] Que se passerait-il si on modifiait `*p` après la ligne 19 ?

Windows: Changer *p ne fera rien (que changer la valeur de *p evidemment...)
Linux: Changer *p dans un bloque changera la valeur de 'n' ou 'r', sinon ça ne fait rien.


--------
Output Windows:
&n = 000000000065FE14
p = 0000000000000000
&a = 000000000065FE10
p = 000000000065FE10
*p = 5
p = 000000000065FE10
*p = 5
n = 7
&n = 000000000065FE0C
p = 000000000065FE10
*p = 5
n = 10
r = 11.000000
&r = 000000000065FE00
*p = 5

Output Linux:
&n = 0x7fff0081faac
p = (nil)
&a = 0x7fff0081fab0
p = 0x7fff0081fab0
*p = 5
p = 0x7fff0081fab0
*p = 5
n = 7
&n = 0x7fff0081fab0
p = 0x7fff0081fab0
*p = 7
n = 10
r = 11.000000
&r = 0x7fff0081fab0
*p = 0